<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>ToDoList</title>

    <style>
      @import url("https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@100&family=Roboto:wght@300&display=swap");
      @import url("https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:wght@300&family=Roboto+Mono:wght@100&family=Roboto:wght@300&display=swap");
      body {
        background: rgb(131, 58, 180);
        background: linear-gradient(
          90deg,
          rgba(131, 58, 180, 1) 0%,
          rgba(253, 29, 29, 1) 50%,
          rgba(252, 176, 69, 1) 100%
        );
        display: flex;
        justify-content: center;
        font-family: "Roboto", sans-serif;
        font-family: "Roboto Mono", monospace;
      }

      .board {
        background-color: rgba(255, 255, 255, 0.8);
        width: 320px;
        margin: 5px;
        display: flex;
        flex-direction: column;
      }

      h3 {
        background-color: orange;
        color: white;
        margin: 0px;
        text-align: center;
        font-size: 24px;
      }

      .task {
        background-color: rgba(200, 200, 200, 0.8);
        margin: 4px;
        border-radius: 5px;
      }

      .task:hover {
        cursor: pointer;
      }

      .task p {
        font-size: 16px;
        font-family: "IBM Plex Mono", monospace;
        padding: 0 6px;
      }

      ul {
        list-style-type: none;
        min-height: 300px;
        padding: 2px;
        display: flex;
        flex-wrap: wrap;
        align-content: flex-start;
      }

      li {
        background-color: white;
        box-shadow: 2px 2px rgba(0, 0, 0, 0.2);
        border-radius: 4px;
        min-width: 100px;
        height: 40px;
        display: flex;
        justify-content: space-between;
        margin: 4px 10px;
        padding: 8px;
        align-items: center;
      }

      li:hover {
        cursor: move;
      }

      .xis {
        background-color: pink;
        width: 16px;
        height: 16px;
        border-radius: 50%;
        text-align: center;
        font-size: 14px;
        color: #c3c3c3;
        font-weight: 100;
      }

      .xis:hover {
        cursor: pointer;
        background-color: lightcoral;
      }
    </style>
  </head>

  <body>
    <div class="board">
      <h3>To do</h3>
      <ul id="todo" ondrop="drop(event, this.id)" ondragover="over(event)">
        <li id="one" draggable="true" ondrag="drag(event)">
          <p class="xis" onclick="close(this)">x</p>
        </li>
      </ul>
      <div class="task" onclick="addTask(this)">
        <p>Add tasks</p>
      </div>
    </div>

    <div class="board">
      <h3>Doing</h3>
      <ul id="doing" ondrop="drop(event, this.id)" ondragover="over(event)">
        <li id="two" draggable="true" ondrag="drag(event)"></li>
      </ul>
      <div class="task" onclick="addTask(this)">
        <p>Add tasks</p>
      </div>
    </div>

    <div class="board">
      <h3>Done</h3>
      <ul id="done" ondrop="drop(event, this.id)" ondragover="over(event)">
        <li id="three" draggable="true" ondrag="drag(event)"></li>
      </ul>
      <div class="task" onclick="addTask(this)">
        <p>Add tasks</p>
      </div>
    </div>

    <script>
      function drag(event) {
        event.dataTransfer.setData("card", event.target.id);
      }

      function over(event) {
        event.preventDefault();
      }

      function drop(event, id) {
        event.preventDefault();
        const target = document.getElementById(id);
        const data = event.dataTransfer.getData("card");
        const card = document.getElementById(data);
        target.appendChild(card);
        event.dataTransfer.clearData();
      }
      function addTask(elemento) {
        const ulId = elemento.previousElementSibling.id;
        const text = prompt("Name the task");
        const board = document.getElementById(ulId);

        const template = `
        <li id="${new Date().getTime()}" draggable="true" ondragstart="drag(event)">
          <p>${text}</p>
          <p class="xis" onclick="close(this)">x</p>
        </li>
        `;

        board.innerHTML = board.innerHTML + template;
      }

      function close(elemento) {
        document.getElementById(elemento.parentElement.id).remove(ulId);
      }
    </script>
  </body>
</html>
